#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('yakssok-back:server');
var http = require('http');
// https 서버 모듈
const https = require('https');
const fs = require('fs');

// 웹소켓 모듈 추가(socket.js)
const webSocket = require('../socket');

const options = {
	key: fs.readFileSync('./keys/private.pem'),
	cert: fs.readFileSync('./keys/public.pem')
};


/**
 * Get port from environment and store in Express.
 */

// 포트를 환경변수로 만든 경우 그 환경변수를 따르고 환경변수가 없을 경우 80번 포트를 듣는다
var port = normalizePort(process.env.PORT || '80');
console.log(`포트 ${ port }번에서 실행 중`);
app.set('port', port);

/**
 * Create HTTP server.
 */

// http 웹서버(80포트) 생성
var server = http.createServer(app);
// https 웹서버(443포트) 생성
var https_server = https.createServer(options, app);

// 웹소켓과 웹서버(현재 http) 연결 처리
webSocket(server);
webSocket(https_server);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

https_server.listen('443', () => {
  console.log('443포트에서 실행중');
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
